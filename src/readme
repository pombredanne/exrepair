About CodeRepair:
CodeRepairは文字列データ圧縮プログラムです．
ヘッダ以外は指定された固定長の符号で全て出力されるという特徴を持ち，
圧縮データを展開せずに高速にパターン検索を行うことが可能です．
最新版は以下のGoogle Code Projectから
http://code.google.com/p/coderepair/


Usage:
./crepair <input_text> [code_length(in bits)]
<input_text>を圧縮します．
code_length(整数）を与えることにより出力コード長を指定できます．
出力コード長は8-16ビットの範囲で指定できます．
code_lengthを指定しない場合は8ビットコードで圧縮を行います。
xxビットを指定したときに，input_text.crxxという圧縮ファイルを生成します．

./cdespair <compressed_text> <restored_text>
<compressed_text>から，元テキストを<restored_text>という名前のファイルで復元します．

./cpm <compressed_text> pattern
<compressed_text>を展開せずにpatternの出現回数を求めます．
crepair用の複数パタン検索，出現位置報告は未実装です...

./cpm8 <compressed_text> pattern
cpmの8bit符号圧縮テキストに特化した版．
計算機環境によってはcpmよりも速いことがあります．（遅い場合もあります）


Memo:
・ASCIIコードのテキストなどは8ビットでもgzipと同等程度の圧縮率．
・アルファベットサイズが256に近い場合は8ビットコードではほとんど圧縮できない
　（その場合は9ビット以上で圧縮することを推奨）.
・圧縮処理はメモリ使用量が大きいので注意（テキストサイズの15-20倍くらい必要）.
・入力テキストサイズが大きい場合は，出力コード長を伸ばすことで圧縮率が改善される．
・入力テキストサイズが小さい場合は，コード長を伸ばすと圧縮率が悪くなる.
・200MBくらいのテキストだと11ｰ13ビット辺りが最適．
・展開速度は高速（特に８ビットの場合）
・パターン検索速度は8ビットが最速．
　9-15ビットはビット処理が発生するため少し遅くなる．
　計算機のキャッシュ性能によって検索速度が変わる．
　ビット長が長くなるとPMMのキャッシュミスのため遅くなる．


ToDo（優先度順）:
・改良AC照合機械を実装する.
・パターンの出現位置報告をできるようにする．
・テキストを分割して圧縮できるようにする.
・文脈を伸ばせるようにする？
・圧縮時のmalloc()の呼び出し回数を減らして高速化する.
・コマンドラインオプションを充実させる．